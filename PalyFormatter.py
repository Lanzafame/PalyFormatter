# PalyFormatter program

import xlsxwriter


# Variables input by the user
well_name = ""
vintage = ""
paly_type = ""
depth = []
zone = []
subzone = []
sample_type = []

# User input - commandline for now
print "Please input Well Name, Vintage, Paly Type:"
well_name = str(raw_input('Well Name: '))
vintage = str(raw_input('Vintage: '))
paly_type = str(raw_input('Paly Type: '))
depth = [float(raw_input('Inital Depth: '))]
zone = [str(raw_input('Initial Zone: '))]
subzone = [str(raw_input('Initial Subzone: '))]
sample_type = [float(raw_input('Inital Type: '))]

# Variables generated by input variables
filename = paly_type + "_" + well_name + "_" + vintage + ".xlsx"
sheetname = "Paly_" + paly_type
zone_header = paly_type + "_ZONE"
subzone_header = paly_type + "_SUBZONE"
sample_type_header = paly_type + "_TYPE"
color_header = paly_type + "_COLOR"
subcolor_header = paly_type + "_SUBCOLOR"
cutting_header = paly_type + "_CUTTING"

# Create a workbook and add a worksheet
workbook = xlsxwriter.Workbook(filename, {'constant_memory': True})
worksheet = workbook.add_worksheet(sheetname)

# Text formatting
bold = workbook.add_format({'bold': 1})

# Data headers
worksheet.write('A1', 'DEPTH', bold)
worksheet.write('B1', zone_header, bold)
worksheet.write('C1', subzone_header, bold)
worksheet.write('D1', sample_type_header, bold)
worksheet.write('E1', color_header, bold)
worksheet.write('F1', subcolor_header, bold)
worksheet.write('G1', cutting_header, bold)

# Worksheet variables
row = 1
depth_col = 0
zone_col = 1
subzone_col = 2
type_col = 3
color_col = 4
subcolor_col = 5
cutting_col = 6
x = 1

worksheet.write_number(row, depth_col, depth[0])
worksheet.write_string(row, zone_col, zone[0])
worksheet.write_string(row, subzone_col, subzone[0])
worksheet.write_number(row, type_col, sample_type[0])
row += 1

# User input of data and automatic formatting of it
while True:
    # exit loop elegantly ;-)
    if raw_input('> ') == '0':
        # Close and save workbook
        workbook.close()
    else:
        # appending
        depth.append(float(input('DEPTH: ')))
        zone.append(str(raw_input('ZONE: ')))
        subzone.append(str(raw_input('SUBZONE: ')))
        sample_type.append(float(raw_input('TYPE: ')))
        # writing
        worksheet.write_number(row, depth_col, depth[x])
        worksheet.write_string(row, zone_col, zone[x])
        worksheet.write_string(row, subzone_col, subzone[x])
        worksheet.write_number(row, type_col, sample_type[x])
        # formatting
        if zone[x] == zone[x-1] or subzone[x] == subzone[x-1]:
            row += 1
        # Create color dictionary and a function that compares the current
        # zone[x] and subzone[x] with the dictionary keys and returns the
        # color assigned to those zones and assigns them to their correct
        # variables and then writes them to the spreadsheet
        #
        # x is the iteration counter instead of row so that when rows are
        # skipped the list indexes don't stuff up
        row += 1
        x += 1








